<?php

/**
 * @file
 * Supports editor integration for the paragraphs module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs_editor\Utility\RenderUtility;

/**
 * Implements hook_entity_insert().
 */
function paragraphs_editor_entity_insert(EntityInterface $entity) {
  \Drupal::service('paragraphs_editor.edit_buffer.cache')->processDeletionQueue($entity);
}

/**
 * Implements hook_entity_update().
 */
function paragraphs_editor_entity_update(EntityInterface $entity) {
  \Drupal::service('paragraphs_editor.edit_buffer.cache')->processDeletionQueue($entity);
}

/**
 * Implements hook_entity_delete().
 */
function paragraphs_editor_entity_delete(EntityInterface $entity) {
  \Drupal::service('paragraphs_editor.edit_buffer.cache')->processDeletionQueue($entity);
}

/**
 * Implements hook_help().
 */
function paragraphs_editor_help($route_name, RouteMatchInterface $route_match) {
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paragraphs_editor_form_field_storage_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form_state->get('field_config')->getType() == 'entity_reference_revisions') {
    $form['cardinality_container']['#states']['invisible'] = [
      ':input[name="settings[target_type]"]' => ['value' => 'paragraphs_markup'],
    ];
    $form['cardinality_container']['#element_validate'][] = 'paragraphs_editor_validate_cardinality';
    $form['cardinality_message'] = [
      '#type' => 'container',
      'markup' => [
        '#markup' => t('The cardinality of a Paragraphs Markup field is must always be one.'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="settings[target_type]"]' => ['value' => 'paragraphs_markup'],
        ],
      ],
    ];
  }
}

/**
 * Validator to ensure Paragraphs Markup fields have cardinality 1.
 *
 * @param array $element
 *   The cardinality element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state to be validated.
 * @param array $form
 *   The complete form array.
 */
function paragraphs_editor_validate_cardinality(array $element, FormStateInterface $form_state, array $form) {
  if ($form_state->getValue(['settings', 'target_type']) == 'paragraphs_markup') {
    $form_state->setValue('cardinality', 1);
    $form_state->setValue('cardinality_number', 1);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function paragraphs_editor_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field_definition = $form_state->getBuildInfo()['callback_object']->getEntity();
  if ($field_definition->getType() == 'entity_reference_revisions') {
    $target_type = $field_definition->getFieldStorageDefinition()->getSetting('target_type');
    if ($target_type == 'paragraphs_markup') {
      $form['third_party_settings']['paragraphs_editor'] = [
        '#type' => 'details',
        '#open' => TRUE,
        '#title' => t('Paragraphs Editor'),
      ];

      $form['settings']['#prefix'] = '<div class="visually-hidden">';
      $form['settings']['#suffix'] = '</div>';

      $selection_handler = \Drupal::service('plugin.manager.entity_reference_selection')
        ->getInstance([
          'target_type' => 'paragraph',
          'handler_settings' => $field_definition->getThirdPartySetting('paragraphs_editor', 'handler_settings', []),
        ]);

      $form['third_party_settings']['paragraphs_editor']['handler_settings'] = $selection_handler->buildConfigurationForm([], $form_state);
      $form['third_party_settings']['paragraphs_editor']['handler_settings']['target_bundles_drag_drop']['#prefix'] = '<h5>' . t('Embeddable Paragraph Types') . '</h5>';
      $form['third_party_settings']['paragraphs_editor']['handler_settings']['target_bundles_drag_drop']['#suffix'] = t('The paragraph types that are allowed to be embedded in this markup field.');
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function paragraphs_editor_preprocess_field(array &$variables) {
  RenderUtility::preprocessField($variables);
}
