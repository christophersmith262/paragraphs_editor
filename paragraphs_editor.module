<?php

/**
 * @file
 * Supports CKEDITOR integration for the paragraphs module.
 */

use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function paragraphs_editor_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  }
}

function paragraphs_editor_form_field_config_edit_form_alter(&$form, $form_state) {
  $field_definition = $form_state->getBuildInfo()['callback_object']->getEntity();
  if ($field_definition->getType() == 'entity_reference_revisions') {
    $target_type = $field_definition->getFieldStorageDefinition()->getSetting('target_type');
    if ($target_type == 'paragraph') {
      $form['third_party_settings']['paragraphs_editor'] = array(
        '#type' => 'fieldset',
        '#title' => t('Paragraphs Editor'),
      );

      $options = \Drupal::service('paragraphs_editor.field_value.text_bundle_manager')->getTextBundles();
      if ($options) {
        $form['third_party_settings']['paragraphs_editor'] += array(
          '#type' => 'fieldset',
          '#title' => t('Paragraphs Editor'),
          'enabled' => array(
            '#type' => 'checkbox',
            '#title' => t('Editor Enabled'),
            '#description' => 'Enables Editor integration for this field.',
            '#default_value' => $field_definition->getThirdPartySetting('paragraphs_editor', 'enabled'),
          ),
          'text_bundle' => array(
            '#type' => 'select',
            '#title' => t('Text Bundle'),
            '#description' => t('The bundle to use as text (markup) input.'),
            '#options' => $options,
            '#default_value' => $field_definition->getThirdPartySetting('paragraphs_editor', 'text_bundle'),
            '#element_validate' => array(
              'paragraphs_editor_field_config_edit_form_validate',
            ),
            '#states' => array(
              'visible' => array(
              ':input[name="third_party_settings[paragraphs_editor][enabled]"]' => array('checked' => TRUE),
              ),
            ),
          ),
        );
      }
      else {
        $form['third_party_settings']['paragraphs_editor'] += array(
          'message' => array(
            '#markup' => '<p>' . t('You must create a paragraph type that includes a single field of type "Text (formatted, long)", and make it available to this field in order to use Editor integration with this field.') . '</p>' .
            '<p>' . t('This type will be used to save plaintext content entered in the wysiwyg.') . '</p>',
          ),
        );
      }

      $form['#entity_builders'][] = 'paragraphs_editor_field_config_edit_form_builder';
    }
  }
}

function paragraphs_editor_field_config_edit_form_validate(&$element, $form_state) {
  $parents = $element['#parents'];
  array_pop($parents);
  $settings = $form_state->getValue($parents);

  if (empty($settings['enabled'])) {
    return;
  }

  $text_bundle = $settings['text_bundle'];
  $target_bundles = $form_state->getValue(['settings', 'handler_settings', 'target_bundles']);
  if (!$target_bundles || !empty($target_bundles[$text_bundle])) {
    $text_field = \Drupal::service('paragraphs_editor.field_value.text_bundle_manager')->getBundleTextField($text_bundle);
    if ($text_field) {
      $parents = array_slice($element['#parents'], 0, -1);
      $parents[] = 'text_field';
      $form_state->setValue($parents, $text_field->getName());
      return;
    }
  }

  $form_state->setError($element, t('Selected text bundle is not allowed.'));
}

function paragraphs_editor_field_config_edit_form_builder($entity_type, $entity, &$form, $form_state) {
  $settings = $form_state->getValue(['third_party_settings', 'paragraphs_editor']);
  if (empty($settings['enabled'])) {
    $entity->unsetThirdPartySetting('paragraphs_editor', 'enabled');
    $entity->unsetThirdPartySetting('paragraphs_editor', 'text_bundle');
    $entity->unsetThirdPartySetting('paragraphs_editor', 'text_field');
  }
}

function paragraphs_editor_preprocess_field(&$variables) {
  if (!empty($variables['element']['#paragraphs_editor_context'])) {
    $context_string = $variables['element']['#paragraphs_editor_context'];
    foreach ($variables['items'] as $delta => $item) {
      $variables['items'][$delta]['attributes']->addClass('paragraphs-editor-paragraph-field');
      $variables['items'][$delta]['attributes']->setAttribute('data-context', $context_string);
      $variables['items'][$delta]['content'] = '';
    }
  }
}
